server:
  port: 9000 # 端口

spring:
  application:
    name: gateway-server # 应用名称
#  zipkin:
#    base-url: http://192.168.126.64:9411/ # 服务端地址
#    sender:
#      type: web                      # 数据传输方式，web 表示以 HTTP 报文的形式向服务端发送数据
#  sleuth:
#    sampler:
#      probability: 1.0               # 收集数据百分比，默认 0.1（10%）

  zipkin:
    base-url: http://192.168.126.64:9411/ # 服务端地址
    sender:
      type: rabbit
    rabbitmq:
      queue: zipkin                  # 队列名称
  rabbitmq:
    host: 192.168.126.64             # 服务器 IP
    port: 5672                       # 服务器端口
    username: lizongzai                  # 用户名
    password: password               # 密码
    virtual-host: /                  # 虚拟主机地址
    listener:
      direct:
        retry:
          enabled: true              # 是否开启发布重试
          max-attempts: 5            # 最大重试次数
          initial-interval: 5000     # 重试间隔时间（单位毫秒）
      simple:
        retry:
          enabled: true              # 是否开启消费者重试
          max-attempts: 5            # 最大重试次数
          initial-interval: 5000     # 重试间隔时间（单位毫秒）
  sleuth:
    sampler:
      probability: 1.0               # 收集数据百分比，默认 0.1（10%）

  cloud:
    gateway:
      discovery:
        locator:
          # 是否与服务发现组件进行结合，通过 serviceId 转发到具体服务实例。http://localhost:9000/product-service/product/1
          enabled: true                  # 是否开启基于服务发现的路由规则
          lower-case-service-id: true    # 是否将服务名称转小写

#      # 路由规则
#      routes:
#        - id: product-service           # 路由 ID，唯一
#          uri: lb://product-service     # lb:// 根据服务名称从注册中心获取服务请求地址
#          predicates: # 断言（判断条件）
#            # 匹配对应 URI 的请求，将匹配到的请求追加在目标 URI 之后
#            - Path=/product/**
#          filters: # 网关过滤器
#            # 限流过滤器
#            - name: RequestRateLimiter
#              args:
#                redis-rate-limiter.replenishRate: 1 # 令牌桶每秒填充速率
#                redis-rate-limiter.burstCapacity: 2 # 令牌桶总容量
#                #key-resolver: "#{@pathKeyResolver}" # 使用 SpEL 表达式按名称引用 bean
#                #key-resolver: "#{@parameterKeyResolver}" # 使用 SpEL 表达式按名称引用 bean
#                key-resolver: "#{@ipKeyResolver}" # 使用 SpEL 表达式按名称引用 bean
#
#        - id: order-service           # 路由 ID，唯一
#          uri: lb://order-service     # lb:// 根据服务名称从注册中心获取服务请求地址
#          predicates: # 断言（判断条件）
#            # 匹配对应 URI 的请求，将匹配到的请求追加在目标 URI 之后
#            - Path=/order/**
#          filters: # 网关过滤器
#            # 限流过滤器
#            - name: RequestRateLimiter
#              args:
#                redis-rate-limiter.replenishRate: 1 # 令牌桶每秒填充速率
#                redis-rate-limiter.burstCapacity: 2 # 令牌桶总容量
#                #key-resolver: "#{@pathKeyResolver}" # 使用 SpEL 表达式按名称引用 bean
#                #key-resolver: "#{@parameterKeyResolver}" # 使用 SpEL 表达式按名称引用 bean
#                key-resolver: "#{@ipKeyResolver}" # 使用 SpEL 表达式按名称引用 bean

  #      routes:
  #        - id: product-service           # 路由 ID，唯一
  #          uri: lb://product-service     # lb:// 根据服务名称从注册中心获取服务请求地址
  #          predicates: # 断言（判断条件）
  #            # 匹配对应 URI 的请求，将匹配到的请求追加在目标 URI 之后
  #            #- Path=/product/**, /api-gateway/**
  #            #- Path=/**
  #            # 匹配对应 URI 的请求，将匹配到的请求追加在目标 URI 之后
  #            - Path=/api/product/{segment}
  #          filters: # 网关过滤器
  #            # 将 /api-gateway/product/1 重写为 /product/1
  #            #- RewritePath=/api-gateway(?<segment>/?.*), $\{segment}
  #            # 将 /1 重写为 /product/1
  #            #- PrefixPath=/product
  #            # 将 /api/123/product/1 重写为 /product/1
  #            #- StripPrefix=2
  #            # 将 /api/product/1 重写为 /product/1
  #            - SetPath=/product/{segment}

  redis:
    #超时时间
    timeout: 10000ms
    #服务器地址
    host: 192.168.126.64
    #服务器端口
    port: 6379
    #数据库
    database: 0
    #密码
    password: Rational123
    lettuce:
      pool:
        #最大连接数，默认8
        max-active: 1024
        #最大连接阻塞等待时间，默认-1
        max-wait: 10000ms
        #最大空闲连接
        max-idle: 200
        #最小空闲连接
        min-idle: 5

#      discovery:
#        locator:
#          # 是否与服务发现组件进行结合，通过 serviceId 转发到具体服务实例。http://localhost:9000/product-service/product/1
#          enabled: true                  # 是否开启基于服务发现的路由规则
#          lower-case-service-id: true    # 是否将服务名称转小写

#      # 路由规则
#      routes:
#        - id: product-service           # 路由 ID，唯一
#          uri: http://localhost:7070/   # 目标 URI，路由到微服务的地址
#          predicates:                   # 断言（判断条件）
#            #- Path=/product/**         # 匹配对应 URL 的请求，将匹配到的请求追加在目标 URI 之后
#            #- Query=token              # 匹配请求参数中包含 token 的请求
#            #- Query=token, password.   # 匹配请求参数中包含 token 并且其参数值满足正则表达式 abc. 的请求
#            #- Method=GET               # 匹配任意 GET 请求
#            #- After=2023-04-23T20:20:20.000+08:00[Asia/Shanghai] # 匹配中国上海时间 2020-02-02 20:20:20 之后的请求
#            #- RemoteAddr=192.168.1.4/0 # 匹配远程地址请求是 RemoteAddr 的请求，0表示子网掩码
#            - Header=X-Request-Id, \d+  # 匹配请求头包含 X-Request-Id 并且其值匹配正则表达式 \d+ 的请求,表示任意数字
#        # 动态获取URI
#        - id: order-service           # 路由 ID，唯一
#          uri: lb://order-service     # lb:// 根据服务名称从注册中心获取服务请求地址
#          predicates: # 断言（判断条件）
#            - Path=/order/**          # 匹配对应 URL 的请求，将匹配到的请求追加在目标 URI 之后

# 配置 Eureka Server 注册中心
eureka:
  instance:
    prefer-ip-address: true       # 是否使用 ip 地址注册
    instance-id: ${spring.cloud.client.ip-address}:${server.port} # ip:port
  client:
    service-url: # 设置服务注册中心地址
      defaultZone: http://root:123456@localhost:8761/eureka/,http://root:123456@localhost:8762/eureka/